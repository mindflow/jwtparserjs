import{Map}from"./coreutil_v1.js";class JwtEntry{constructor(t,e){this.name=t,this.value=e}}class AudienceClaim extends JwtEntry{static get NAME(){return"aud"}constructor(t){super(AudienceClaim.NAME,t)}}class ExpiryClaim extends JwtEntry{static get NAME(){return"exp"}constructor(t){super(ExpiryClaim.NAME,t)}}class IssuerClaim extends JwtEntry{static get NAME(){return"iss"}constructor(t){super(IssuerClaim.NAME,t)}}class JwtIdClaim extends JwtEntry{static get NAME(){return"jti"}constructor(t){super(JwtIdClaim.NAME,t)}}class NotBeforeClaim extends JwtEntry{static get NAME(){return"nbf"}constructor(t){super(NotBeforeClaim.NAME,t)}}class SubjectClaim extends JwtEntry{static get NAME(){return"sub"}constructor(t){super(SubjectClaim.NAME,t)}}class IssuedAtClaim extends JwtEntry{static get NAME(){return"iat"}constructor(t){super(IssuedAtClaim.NAME,t)}}class JwtBody{constructor(t=null){this.subject=this.getClaim(t,SubjectClaim.NAME,SubjectClaim),this.issuer=this.getClaim(t,IssuerClaim.NAME,IssuerClaim),this.audience=this.getClaim(t,AudienceClaim.NAME,AudienceClaim),this.jwtId=this.getClaim(t,JwtIdClaim.NAME,JwtIdClaim),this.expiry=this.getClaim(t,ExpiryClaim.NAME,ExpiryClaim),this.notBefore=this.getClaim(t,NotBeforeClaim.NAME,NotBeforeClaim),this.issuedAt=this.getClaim(t,IssuedAtClaim.NAME,NotBeforeClaim),this.namedClaims=this.asMap(t)}getClaim(t,e,i){if(null===t)return null;const n=t[e];return null===n||void 0===n?null:new i(n)}asMap(t){const e=new Map;if(null===t)return e;for(const[i,n]of Object.entries(t))e.set(i,new JwtEntry(i,n));return e}getNamedClaim(t){return this.namedClaims.get(t)}}class AlgorithmMeta extends JwtEntry{static get NAME(){return"alg"}constructor(t){super(AlgorithmMeta.NAME,t)}}class TypeMeta extends JwtEntry{static get NAME(){return"typ"}constructor(t){super(TypeMeta.NAME,t)}}class JwtHeader{constructor(t){this.algorithm=this.getMeta(t,AlgorithmMeta.NAME,AlgorithmMeta),this.type=this.getMeta(t,TypeMeta.NAME,TypeMeta)}getMeta(t,e,i){if(null===t)return null;const n=t[e];return null===n||void 0===n?null:new i(n)}}class Jwt{constructor(t,e,i){this.source=t,this.header=e,this.body=i}}class JwtStringParser{static parseString(t){const e=t.split(".");if(e.length<2)throw"JWT does not have a body";const i=atob(e[0]),n=JSON.parse(i),r=new JwtHeader(n),u=atob(e[1]),s=JSON.parse(u),a=new JwtBody(s);return new Jwt(t,r,a)}}export{AlgorithmMeta,AudienceClaim,ExpiryClaim,IssuedAtClaim,IssuerClaim,Jwt,JwtBody,JwtEntry,JwtHeader,JwtIdClaim,JwtStringParser,NotBeforeClaim,SubjectClaim,TypeMeta};
