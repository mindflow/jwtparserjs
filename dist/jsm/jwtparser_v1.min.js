import{Map as t}from"./coreutil_v1.js";class s{constructor(t,s){this.name=t,this.value=s}}class e extends s{static get NAME(){return"aud"}constructor(t){super(e.NAME,t)}}class r extends s{static get NAME(){return"exp"}constructor(t){super(r.NAME,t)}}class n extends s{static get NAME(){return"iss"}constructor(t){super(n.NAME,t)}}class i extends s{static get NAME(){return"jti"}constructor(t){super(i.NAME,t)}}class c extends s{static get NAME(){return"nbf"}constructor(t){super(c.NAME,t)}}class a extends s{static get NAME(){return"sub"}constructor(t){super(a.NAME,t)}}class u extends s{static get NAME(){return"iat"}constructor(t){super(u.NAME,t)}}class l{constructor(t=null){this.subject=this.getClaim(t,a.NAME,a),this.issuer=this.getClaim(t,n.NAME,n),this.audience=this.getClaim(t,e.NAME,e),this.jwtId=this.getClaim(t,i.NAME,i),this.expiry=this.getClaim(t,r.NAME,r),this.notBefore=this.getClaim(t,c.NAME,c),this.issuedAt=this.getClaim(t,u.NAME,c),this.namedClaims=this.asMap(t)}getClaim(t,s,e){if(null===t)return null;const r=t[s];return null==r?null:new e(r)}asMap(e){const r=new t;if(null===e)return r;for(const[t,n]of Object.entries(e))r.set(t,new s(t,n));return r}getNamedClaim(t){return this.namedClaims.get(t)}}class o extends s{static get NAME(){return"alg"}constructor(t){super(o.NAME,t)}}class M extends s{static get NAME(){return"typ"}constructor(t){super(M.NAME,t)}}class h{constructor(t){this.algorithm=this.getMeta(t,o.NAME,o),this.type=this.getMeta(t,M.NAME,M)}getMeta(t,s,e){if(null===t)return null;const r=t[s];return null==r?null:new e(r)}}class N{constructor(t,s,e){this.source=t,this.header=s,this.body=e}}class A{static parseString(t){const s=t.split(".");if(s.length<2)throw"JWT does not have a body";const e=atob(s[0]),r=JSON.parse(e),n=new h(r),i=atob(s[1]),c=JSON.parse(i),a=new l(c);return new N(t,n,a)}}export{o as AlgorithmMeta,e as AudienceClaim,r as ExpiryClaim,u as IssuedAtClaim,n as IssuerClaim,N as Jwt,l as JwtBody,s as JwtEntry,h as JwtHeader,i as JwtIdClaim,A as JwtStringParser,c as NotBeforeClaim,a as SubjectClaim,M as TypeMeta};
