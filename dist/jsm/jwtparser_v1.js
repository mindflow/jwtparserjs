import { Map } from './coreutil_v1.js'

class JwtEntry {

    /**
     * 
     * @param {String} name 
     * @param {any} value 
     */
    constructor(name, value) {

        /**
         * @type {String}
         */
        this.name = name;

        /**
         * @type {any}
         */
        this.value = value;
    }

}

class AudienceClaim extends JwtEntry {

    static get NAME() { return "aud"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(AudienceClaim.NAME, value);
    }

}

class ExpiryClaim extends JwtEntry {

    static get NAME() { return "exp"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(ExpiryClaim.NAME, value);
    }

}

class IssuerClaim extends JwtEntry {

    static get NAME() { return "iss"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(IssuerClaim.NAME, value);
    }

}

class JwtIdClaim extends JwtEntry {

    static get NAME() { return "jti"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(JwtIdClaim.NAME, value);
    }

}

class NotBeforeClaim extends JwtEntry {

    static get NAME() { return "nbf"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(NotBeforeClaim.NAME, value);
    }

}

class SubjectClaim extends JwtEntry {

    static get NAME() { return "sub"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(SubjectClaim.NAME, value);
    }

}

class IssuedAtClaim extends JwtEntry {

    static get NAME() { return "iat"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(IssuedAtClaim.NAME, value);
    }

}

class JwtBody {

    constructor(claimsObject = null) {

        /**
         * @type {SubjectClaim}
         */
        this.subject = this.getClaim(claimsObject, SubjectClaim.NAME, SubjectClaim);

        /**
         * @type {IssuerClaim}
         */
        this.issuer = this.getClaim(claimsObject, IssuerClaim.NAME, IssuerClaim);

        /**
         * @type {AudienceClaim}
         */
        this.audience = this.getClaim(claimsObject, AudienceClaim.NAME, AudienceClaim);

        /**
         * @type {JwtIdClaim}
         */
        this.jwtId = this.getClaim(claimsObject, JwtIdClaim.NAME, JwtIdClaim);

        /**
         * @type {ExpiryClaim}
         */
        this.expiry = this.getClaim(claimsObject, ExpiryClaim.NAME, ExpiryClaim);

        /**
         * @type {NotBeforeClaim}
         */
        this.notBefore = this.getClaim(claimsObject, NotBeforeClaim.NAME, NotBeforeClaim);

        /**
         * @type {NotBeforeClaim}
         */
        this.issuedAt = this.getClaim(claimsObject, IssuedAtClaim.NAME, NotBeforeClaim);

        /**
         * @type {Map}
         */
        this.namedClaims = this.asMap(claimsObject);
    }

    /**
     * 
     * @param {*} claimsObject 
     * @param {*} attributeName 
     * @returns {*}
     */
    getClaim(claimsObject, attributeName, className) {
        if (claimsObject === null) {
            return null;
        }
        const claimsValue = claimsObject[attributeName];
        if(claimsValue === null || claimsValue === undefined) {
            return null;
        }
        return new className(claimsValue);
    }

    asMap(claimsObject) {
        const namedClaims = new Map();
        if (claimsObject === null) {
            return namedClaims;
        }
        for ( const [key, value] of Object.entries(claimsObject)) {
            namedClaims.set(key, new JwtEntry(key, value));
        }
        return namedClaims;
    }

    /**
     * 
     * @param {String} name 
     * @returns {JwtEntry}
     */
    getNamedClaim(name) {
        return this.namedClaims.get(name);
    }

}

class AlgorithmMeta extends JwtEntry {

    static get NAME() { return "alg"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(AlgorithmMeta.NAME, value);
    }

}

class TypeMeta extends JwtEntry {

    static get NAME() { return "typ"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(TypeMeta.NAME, value);
    }

}

class JwtHeader {

    constructor(metaObject) {

        /**
         * @type {AlgorithmMeta}
         */
        this.algorithm = this.getMeta(metaObject, AlgorithmMeta.NAME, AlgorithmMeta);

        /**
         * @type {TypeMeta}
         */
        this.type = this.getMeta(metaObject, TypeMeta.NAME, TypeMeta);
    }

    /**
     * 
     * @param {*} metaObject 
     * @param {*} attributeName 
     */
    getMeta(metaObject, attributeName, className) {
        if (metaObject === null) {
            return null;
        }
        const metaValue = metaObject[attributeName];
        if(metaValue === null || metaValue === undefined) {
            return null;
        }
        return new className(metaValue);
    }

}

class Jwt {

    constructor(stringSource, jwtHeader, jwtBody) {
        /**
         * @type {String}
         */
        this.source = stringSource;

        /**
         * @type {JwtHeader}
         */
        this.header = jwtHeader;

        /**
         * @type {JwtBody}
         */
        this.body = jwtBody;
    }

}

class JwtStringParser {

    /**
     * 
     * @param {String} jwtString
     * @returns {Jwt} jwt
     */
    static parseString(jwtString) {
        /**
         * @type [Array]
         */
        const jwtParts = jwtString.split(".");
        if(jwtParts.length < 2) {
            throw "JWT does not have a body";
        }
        
        const headerDecoded = atob(jwtParts[0]);
        const headerObject = JSON.parse(headerDecoded);
        const jwtHeader = new JwtHeader(headerObject);

        const bodyDecoded = atob(jwtParts[1]);
        const bodyObject = JSON.parse(bodyDecoded);
        const jwtBody = new JwtBody(bodyObject);

        return new Jwt(jwtString, jwtHeader, jwtBody);
    }

}

export { AlgorithmMeta, AudienceClaim, ExpiryClaim, IssuedAtClaim, IssuerClaim, Jwt, JwtBody, JwtEntry, JwtHeader, JwtIdClaim, JwtStringParser, NotBeforeClaim, SubjectClaim, TypeMeta };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
