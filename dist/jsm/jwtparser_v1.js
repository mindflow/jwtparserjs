import { Map, StringUtils } from './coreutil_v1.js';

class JwtEntry {

    /**
     * 
     * @param {String} name 
     * @param {any} value 
     */
    constructor(name, value) {

        /**
         * @type {String}
         */
        this.name = name;

        /**
         * @type {any}
         */
        this.value = value;
    }

}

class AudienceClaim extends JwtEntry {

    static get NAME() { return "aud"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(AudienceClaim.NAME, value);
    }

    get label() {
        return "Audience";
    }
}

class ExpiryClaim extends JwtEntry {

    static get NAME() { return "exp"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(ExpiryClaim.NAME, value);
    }

    get formattedValue() {
        const date = new Date(this.value * 1000);
        return "" + date.getFullYear() + "-" +
                (date.getMonth() + 1) + "-" + 
                date.getDate() + " " + 
                date.getHours() + ":" + 
                date.getMinutes() + ":" + 
                date.getSeconds();
    }

    get label() {
        return "Expiry";
    }

}

class IssuerClaim extends JwtEntry {

    static get NAME() { return "iss"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(IssuerClaim.NAME, value);
    }

    get label() {
        return "Issuer";
    }
}

class JwtIdClaim extends JwtEntry {

    static get NAME() { return "jti"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(JwtIdClaim.NAME, value);
    }

    get label() {
        return "JWT Id";
    }

}

class NotBeforeClaim extends JwtEntry {

    static get NAME() { return "nbf"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(NotBeforeClaim.NAME, value);
    }

    get formattedValue() {
        const date = new Date(this.value * 1000);
        return "" + date.getFullYear() + "-" +
                (date.getMonth() + 1) + "-" + 
                date.getDate() + " " + 
                date.getHours() + ":" + 
                date.getMinutes() + ":" + 
                date.getSeconds();
    }

    get label() {
        return "Not Before";
    }

}

class SubjectClaim extends JwtEntry {

    static get NAME() { return "sub"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(SubjectClaim.NAME, value);
    }

    get label() {
        return "Subject";
    }
}

class IssuedAtClaim extends JwtEntry {

    static get NAME() { return "iat"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(IssuedAtClaim.NAME, value);
    }

    get formattedValue() {
        const date = new Date(this.value * 1000);
        return "" + date.getFullYear() + "-" +
                (date.getMonth() + 1) + "-" + 
                date.getDate() + " " + 
                date.getHours() + ":" + 
                date.getMinutes() + ":" + 
                date.getSeconds();
    }

    get label() {
        return "Issued at";
    }

}

class JwtBody {

    constructor(claimsObject = null) {

        this.namedClaims = this.asMap(claimsObject);

    }

    /**
     * 
     * @param {*} value 
     * @param {*} className 
     * @returns {*}
     */
    asTypedClaim(value, className) {
        return new className(value);
    }

    asMap(claimsObject) {
        const namedClaims = new Map();
        if (claimsObject === null) {
            return namedClaims;
        }
        for ( const [key, value] of Object.entries(claimsObject)) {
            namedClaims.set(key, this.asMappedClaim(key, value));
        }
        return namedClaims;
    }

    /**
     * 
     * @param {String} name 
     * @returns {JwtEntry}
     */
    getNamedClaim(name) {
        return this.namedClaims.get(name);
    }

    /**
     * 
     * @param {String} name 
     * @returns {JwtEntry}
     */
     getNamedClaimValue(name) {
        if (this.namedClaims.get(name)) {
            return this.namedClaims.get(name).value;
        }
        return null;
    }

    /**
     * 
     * @param {String} key 
     * @param {String} value 
     * @returns {JwtEntry}
     */
    asMappedClaim(key, value) {

        if (StringUtils.nonNullEquals(key, SubjectClaim.NAME)) {
            return this.asTypedClaim(value, SubjectClaim);
        }
        if (StringUtils.nonNullEquals(key, IssuerClaim.NAME)) {
            return this.asTypedClaim(value, IssuerClaim);
        }
        if (StringUtils.nonNullEquals(key, AudienceClaim.NAME)) {
            return this.asTypedClaim(value, AudienceClaim);
        }
        if (StringUtils.nonNullEquals(key, JwtIdClaim.NAME)) {
            return this.asTypedClaim(value, JwtIdClaim);
        }
        if (StringUtils.nonNullEquals(key, ExpiryClaim.NAME)) {
            return this.asTypedClaim(value, ExpiryClaim);
        }
        if (StringUtils.nonNullEquals(key, NotBeforeClaim.NAME)) {
            return this.asTypedClaim(value, NotBeforeClaim);
        }
        if (StringUtils.nonNullEquals(key, IssuedAtClaim.NAME)) {
            return this.asTypedClaim(value, IssuedAtClaim);
        }
        return new JwtEntry(key, value);
         
    }

    get sub() {
        return this.getNamedClaimValue(SubjectClaim.NAME);
    }

    get iss() {
        return this.getNamedClaimValue(IssuerClaim.NAME);
    }

    get aud() {
        return this.getNamedClaimValue(AudienceClaim.NAME);
    }

    get jti() {
        return this.getNamedClaimValue(JwtIdClaim.NAME);
    }

    get exp() {
        return this.getNamedClaimValue(ExpiryClaim.NAME);
    }

    get nbf() {
        return this.getNamedClaimValue(NotBeforeClaim.NAME);
    }

    get iat() {
        return this.getNamedClaimValue(IssuedAtClaim.NAME);
    }
}

class AlgorithmMeta extends JwtEntry {

    static get NAME() { return "alg"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(AlgorithmMeta.NAME, value);
    }

}

class TypeMeta extends JwtEntry {

    static get NAME() { return "typ"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(TypeMeta.NAME, value);
    }

}

class KeyIdMeta extends JwtEntry {

    static get NAME() { return "kid"; }

    /**
     * 
     * @param {String} value 
     */
    constructor(value) {
        super(KeyIdMeta.NAME, value);
    }

}

class JwtHeader {

    constructor(metaObject) {

        /**
         * @type {AlgorithmMeta}
         */
        this.algorithm = this.getMeta(metaObject, AlgorithmMeta.NAME, AlgorithmMeta);

        /**
         * @type {TypeMeta}
         */
        this.type = this.getMeta(metaObject, TypeMeta.NAME, TypeMeta);

        /**
         * @type {TypeMeta}
         */
         this.kid = this.getMeta(metaObject, KeyIdMeta.NAME, KeyIdMeta);
    }

    /**
     * 
     * @param {*} metaObject 
     * @param {*} attributeName 
     */
    getMeta(metaObject, attributeName, className) {
        if (metaObject === null) {
            return null;
        }
        const metaValue = metaObject[attributeName];
        if(metaValue === null || metaValue === undefined) {
            return null;
        }
        return new className(metaValue);
    }

}

class Jwt {

    constructor(stringSource, jwtHeader, jwtBody) {
        /**
         * @type {String}
         */
        this.source = stringSource;

        /**
         * @type {JwtHeader}
         */
        this.header = jwtHeader;

        /**
         * @type {JwtBody}
         */
        this.body = jwtBody;
    }

}

class JwtStringParser {

    /**
     * 
     * @param {String} jwtString
     * @returns {Jwt} jwt
     */
    static parseString(jwtString) {
        /**
         * @type [Array]
         */
        const jwtParts = jwtString.split(".");
        if(jwtParts.length < 2) {
            throw "JWT does not have a body";
        }
        
        const headerDecoded = atob(jwtParts[0]);
        const headerObject = JSON.parse(headerDecoded);
        const jwtHeader = new JwtHeader(headerObject);

        const bodyDecoded = atob(jwtParts[1]);
        const bodyObject = JSON.parse(bodyDecoded);
        const jwtBody = new JwtBody(bodyObject);

        return new Jwt(jwtString, jwtHeader, jwtBody);
    }

}

export { AlgorithmMeta, AudienceClaim, ExpiryClaim, IssuedAtClaim, IssuerClaim, Jwt, JwtBody, JwtEntry, JwtHeader, JwtIdClaim, JwtStringParser, KeyIdMeta, NotBeforeClaim, SubjectClaim, TypeMeta };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
